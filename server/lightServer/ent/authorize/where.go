// Code generated by entc, DO NOT EDIT.

package authorize

import (
	"lightServer/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceID), v))
	})
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v Provider) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvider), v))
	})
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v Provider) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvider), v))
	})
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...Provider) predicate.Authorize {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Authorize(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvider), v...))
	})
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...Provider) predicate.Authorize {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Authorize(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvider), v...))
	})
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceID), v))
	})
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceID), v))
	})
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...string) predicate.Authorize {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Authorize(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServiceID), v...))
	})
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...string) predicate.Authorize {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Authorize(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServiceID), v...))
	})
}

// ServiceIDGT applies the GT predicate on the "service_id" field.
func ServiceIDGT(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceID), v))
	})
}

// ServiceIDGTE applies the GTE predicate on the "service_id" field.
func ServiceIDGTE(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceID), v))
	})
}

// ServiceIDLT applies the LT predicate on the "service_id" field.
func ServiceIDLT(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceID), v))
	})
}

// ServiceIDLTE applies the LTE predicate on the "service_id" field.
func ServiceIDLTE(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceID), v))
	})
}

// ServiceIDContains applies the Contains predicate on the "service_id" field.
func ServiceIDContains(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServiceID), v))
	})
}

// ServiceIDHasPrefix applies the HasPrefix predicate on the "service_id" field.
func ServiceIDHasPrefix(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServiceID), v))
	})
}

// ServiceIDHasSuffix applies the HasSuffix predicate on the "service_id" field.
func ServiceIDHasSuffix(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServiceID), v))
	})
}

// ServiceIDEqualFold applies the EqualFold predicate on the "service_id" field.
func ServiceIDEqualFold(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServiceID), v))
	})
}

// ServiceIDContainsFold applies the ContainsFold predicate on the "service_id" field.
func ServiceIDContainsFold(v string) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServiceID), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Authorize) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Authorize) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Authorize) predicate.Authorize {
	return predicate.Authorize(func(s *sql.Selector) {
		p(s.Not())
	})
}
