// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"lightServer/ent/order"
	"lightServer/ent/review"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// Review is the model entity for the Review schema.
type Review struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WriteAt holds the value of the "write_at" field.
	WriteAt time.Time `json:"write_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Contents holds the value of the "contents" field.
	Contents string `json:"contents,omitempty"`
	// IsDelete holds the value of the "is_delete" field.
	IsDelete bool `json:"is_delete,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReviewQuery when eager-loading is set.
	Edges        ReviewEdges `json:"edges"`
	review_order *int
}

// ReviewEdges holds the relations/edges for other nodes in the graph.
type ReviewEdges struct {
	// Order holds the value of the order edge.
	Order *Order
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// The edge order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Review) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // write_at
		&sql.NullString{}, // title
		&sql.NullString{}, // contents
		&sql.NullBool{},   // is_delete
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Review) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // review_order
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Review fields.
func (r *Review) assignValues(values ...interface{}) error {
	if m, n := len(values), len(review.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field write_at", values[0])
	} else if value.Valid {
		r.WriteAt = value.Time
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[1])
	} else if value.Valid {
		r.Title = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field contents", values[2])
	} else if value.Valid {
		r.Contents = value.String
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field is_delete", values[3])
	} else if value.Valid {
		r.IsDelete = value.Bool
	}
	values = values[4:]
	if len(values) == len(review.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field review_order", value)
		} else if value.Valid {
			r.review_order = new(int)
			*r.review_order = int(value.Int64)
		}
	}
	return nil
}

// QueryOrder queries the order edge of the Review.
func (r *Review) QueryOrder() *OrderQuery {
	return (&ReviewClient{config: r.config}).QueryOrder(r)
}

// Update returns a builder for updating this Review.
// Note that, you need to call Review.Unwrap() before calling this method, if this Review
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Review) Update() *ReviewUpdateOne {
	return (&ReviewClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Review) Unwrap() *Review {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Review is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Review) String() string {
	var builder strings.Builder
	builder.WriteString("Review(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", write_at=")
	builder.WriteString(r.WriteAt.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(r.Title)
	builder.WriteString(", contents=")
	builder.WriteString(r.Contents)
	builder.WriteString(", is_delete=")
	builder.WriteString(fmt.Sprintf("%v", r.IsDelete))
	builder.WriteByte(')')
	return builder.String()
}

// Reviews is a parsable slice of Review.
type Reviews []*Review

func (r Reviews) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
