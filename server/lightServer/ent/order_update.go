// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lightServer/ent/order"
	"lightServer/ent/orderfield"
	"lightServer/ent/predicate"
	"lightServer/ent/restaurant"
	"lightServer/ent/user"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks      []Hook
	mutation   *OrderMutation
	predicates []predicate.Order
}

// Where adds a new predicate for the builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetOrderAt sets the order_at field.
func (ou *OrderUpdate) SetOrderAt(t time.Time) *OrderUpdate {
	ou.mutation.SetOrderAt(t)
	return ou
}

// SetNillableOrderAt sets the order_at field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetOrderAt(*t)
	}
	return ou
}

// SetCookingAt sets the cooking_at field.
func (ou *OrderUpdate) SetCookingAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCookingAt(t)
	return ou
}

// SetNillableCookingAt sets the cooking_at field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCookingAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCookingAt(*t)
	}
	return ou
}

// ClearCookingAt clears the value of cooking_at.
func (ou *OrderUpdate) ClearCookingAt() *OrderUpdate {
	ou.mutation.ClearCookingAt()
	return ou
}

// SetDeliverAt sets the deliver_at field.
func (ou *OrderUpdate) SetDeliverAt(t time.Time) *OrderUpdate {
	ou.mutation.SetDeliverAt(t)
	return ou
}

// SetNillableDeliverAt sets the deliver_at field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliverAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDeliverAt(*t)
	}
	return ou
}

// ClearDeliverAt clears the value of deliver_at.
func (ou *OrderUpdate) ClearDeliverAt() *OrderUpdate {
	ou.mutation.ClearDeliverAt()
	return ou
}

// SetCompleteAt sets the complete_at field.
func (ou *OrderUpdate) SetCompleteAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCompleteAt(t)
	return ou
}

// SetNillableCompleteAt sets the complete_at field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCompleteAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCompleteAt(*t)
	}
	return ou
}

// ClearCompleteAt clears the value of complete_at.
func (ou *OrderUpdate) ClearCompleteAt() *OrderUpdate {
	ou.mutation.ClearCompleteAt()
	return ou
}

// SetWhoID sets the who edge to User by id.
func (ou *OrderUpdate) SetWhoID(id int) *OrderUpdate {
	ou.mutation.SetWhoID(id)
	return ou
}

// SetWho sets the who edge to User.
func (ou *OrderUpdate) SetWho(u *User) *OrderUpdate {
	return ou.SetWhoID(u.ID)
}

// SetWhereID sets the where edge to Restaurant by id.
func (ou *OrderUpdate) SetWhereID(id int) *OrderUpdate {
	ou.mutation.SetWhereID(id)
	return ou
}

// SetWhere sets the where edge to Restaurant.
func (ou *OrderUpdate) SetWhere(r *Restaurant) *OrderUpdate {
	return ou.SetWhereID(r.ID)
}

// AddItemIDs adds the items edge to OrderField by ids.
func (ou *OrderUpdate) AddItemIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddItemIDs(ids...)
	return ou
}

// AddItems adds the items edges to OrderField.
func (ou *OrderUpdate) AddItems(o ...*OrderField) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearWho clears the "who" edge to type User.
func (ou *OrderUpdate) ClearWho() *OrderUpdate {
	ou.mutation.ClearWho()
	return ou
}

// ClearWhere clears the "where" edge to type Restaurant.
func (ou *OrderUpdate) ClearWhere() *OrderUpdate {
	ou.mutation.ClearWhere()
	return ou
}

// ClearItems clears all "items" edges to type OrderField.
func (ou *OrderUpdate) ClearItems() *OrderUpdate {
	ou.mutation.ClearItems()
	return ou
}

// RemoveItemIDs removes the items edge to OrderField by ids.
func (ou *OrderUpdate) RemoveItemIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveItemIDs(ids...)
	return ou
}

// RemoveItems removes items edges to OrderField.
func (ou *OrderUpdate) RemoveItems(o ...*OrderField) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		if err = ou.check(); err != nil {
			return 0, err
		}
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ou.check(); err != nil {
				return 0, err
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if _, ok := ou.mutation.WhoID(); ou.mutation.WhoCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"who\"")
	}
	if _, ok := ou.mutation.WhereID(); ou.mutation.WhereCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"where\"")
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OrderAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldOrderAt,
		})
	}
	if value, ok := ou.mutation.CookingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldCookingAt,
		})
	}
	if ou.mutation.CookingAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldCookingAt,
		})
	}
	if value, ok := ou.mutation.DeliverAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDeliverAt,
		})
	}
	if ou.mutation.DeliverAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldDeliverAt,
		})
	}
	if value, ok := ou.mutation.CompleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldCompleteAt,
		})
	}
	if ou.mutation.CompleteAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldCompleteAt,
		})
	}
	if ou.mutation.WhoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WhoTable,
			Columns: []string{order.WhoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.WhoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WhoTable,
			Columns: []string{order.WhoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.WhereCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WhereTable,
			Columns: []string{order.WhereColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.WhereIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WhereTable,
			Columns: []string{order.WhereColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderfield.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// SetOrderAt sets the order_at field.
func (ouo *OrderUpdateOne) SetOrderAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetOrderAt(t)
	return ouo
}

// SetNillableOrderAt sets the order_at field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetOrderAt(*t)
	}
	return ouo
}

// SetCookingAt sets the cooking_at field.
func (ouo *OrderUpdateOne) SetCookingAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCookingAt(t)
	return ouo
}

// SetNillableCookingAt sets the cooking_at field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCookingAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCookingAt(*t)
	}
	return ouo
}

// ClearCookingAt clears the value of cooking_at.
func (ouo *OrderUpdateOne) ClearCookingAt() *OrderUpdateOne {
	ouo.mutation.ClearCookingAt()
	return ouo
}

// SetDeliverAt sets the deliver_at field.
func (ouo *OrderUpdateOne) SetDeliverAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDeliverAt(t)
	return ouo
}

// SetNillableDeliverAt sets the deliver_at field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliverAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDeliverAt(*t)
	}
	return ouo
}

// ClearDeliverAt clears the value of deliver_at.
func (ouo *OrderUpdateOne) ClearDeliverAt() *OrderUpdateOne {
	ouo.mutation.ClearDeliverAt()
	return ouo
}

// SetCompleteAt sets the complete_at field.
func (ouo *OrderUpdateOne) SetCompleteAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCompleteAt(t)
	return ouo
}

// SetNillableCompleteAt sets the complete_at field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCompleteAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCompleteAt(*t)
	}
	return ouo
}

// ClearCompleteAt clears the value of complete_at.
func (ouo *OrderUpdateOne) ClearCompleteAt() *OrderUpdateOne {
	ouo.mutation.ClearCompleteAt()
	return ouo
}

// SetWhoID sets the who edge to User by id.
func (ouo *OrderUpdateOne) SetWhoID(id int) *OrderUpdateOne {
	ouo.mutation.SetWhoID(id)
	return ouo
}

// SetWho sets the who edge to User.
func (ouo *OrderUpdateOne) SetWho(u *User) *OrderUpdateOne {
	return ouo.SetWhoID(u.ID)
}

// SetWhereID sets the where edge to Restaurant by id.
func (ouo *OrderUpdateOne) SetWhereID(id int) *OrderUpdateOne {
	ouo.mutation.SetWhereID(id)
	return ouo
}

// SetWhere sets the where edge to Restaurant.
func (ouo *OrderUpdateOne) SetWhere(r *Restaurant) *OrderUpdateOne {
	return ouo.SetWhereID(r.ID)
}

// AddItemIDs adds the items edge to OrderField by ids.
func (ouo *OrderUpdateOne) AddItemIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddItemIDs(ids...)
	return ouo
}

// AddItems adds the items edges to OrderField.
func (ouo *OrderUpdateOne) AddItems(o ...*OrderField) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearWho clears the "who" edge to type User.
func (ouo *OrderUpdateOne) ClearWho() *OrderUpdateOne {
	ouo.mutation.ClearWho()
	return ouo
}

// ClearWhere clears the "where" edge to type Restaurant.
func (ouo *OrderUpdateOne) ClearWhere() *OrderUpdateOne {
	ouo.mutation.ClearWhere()
	return ouo
}

// ClearItems clears all "items" edges to type OrderField.
func (ouo *OrderUpdateOne) ClearItems() *OrderUpdateOne {
	ouo.mutation.ClearItems()
	return ouo
}

// RemoveItemIDs removes the items edge to OrderField by ids.
func (ouo *OrderUpdateOne) RemoveItemIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveItemIDs(ids...)
	return ouo
}

// RemoveItems removes items edges to OrderField.
func (ouo *OrderUpdateOne) RemoveItems(o ...*OrderField) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveItemIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	if len(ouo.hooks) == 0 {
		if err = ouo.check(); err != nil {
			return nil, err
		}
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouo.check(); err != nil {
				return nil, err
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if _, ok := ouo.mutation.WhoID(); ouo.mutation.WhoCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"who\"")
	}
	if _, ok := ouo.mutation.WhereID(); ouo.mutation.WhereCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"where\"")
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Order.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.OrderAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldOrderAt,
		})
	}
	if value, ok := ouo.mutation.CookingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldCookingAt,
		})
	}
	if ouo.mutation.CookingAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldCookingAt,
		})
	}
	if value, ok := ouo.mutation.DeliverAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDeliverAt,
		})
	}
	if ouo.mutation.DeliverAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldDeliverAt,
		})
	}
	if value, ok := ouo.mutation.CompleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldCompleteAt,
		})
	}
	if ouo.mutation.CompleteAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldCompleteAt,
		})
	}
	if ouo.mutation.WhoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WhoTable,
			Columns: []string{order.WhoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.WhoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WhoTable,
			Columns: []string{order.WhoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.WhereCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WhereTable,
			Columns: []string{order.WhereColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.WhereIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WhereTable,
			Columns: []string{order.WhereColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderfield.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
