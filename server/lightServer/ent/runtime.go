// Code generated by entc, DO NOT EDIT.

package ent

import (
	"lightServer/ent/authorize"
	"lightServer/ent/category"
	"lightServer/ent/file"
	"lightServer/ent/menu"
	"lightServer/ent/order"
	"lightServer/ent/orderfield"
	"lightServer/ent/restaurant"
	"lightServer/ent/review"
	"lightServer/ent/schema"
	"time"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	authorizeFields := schema.Authorize{}.Fields()
	_ = authorizeFields
	// authorizeDescServiceID is the schema descriptor for service_id field.
	authorizeDescServiceID := authorizeFields[1].Descriptor()
	// authorize.ServiceIDValidator is a validator for the "service_id" field. It is called by the builders before save.
	authorize.ServiceIDValidator = authorizeDescServiceID.Validators[0].(func(string) error)
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescName is the schema descriptor for name field.
	categoryDescName := categoryFields[0].Descriptor()
	// category.NameValidator is a validator for the "name" field. It is called by the builders before save.
	category.NameValidator = categoryDescName.Validators[0].(func(string) error)
	fileFields := schema.File{}.Fields()
	_ = fileFields
	// fileDescMime is the schema descriptor for mime field.
	fileDescMime := fileFields[1].Descriptor()
	// file.MimeValidator is a validator for the "mime" field. It is called by the builders before save.
	file.MimeValidator = fileDescMime.Validators[0].(func(string) error)
	// fileDescName is the schema descriptor for name field.
	fileDescName := fileFields[2].Descriptor()
	// file.NameValidator is a validator for the "name" field. It is called by the builders before save.
	file.NameValidator = fileDescName.Validators[0].(func(string) error)
	menuFields := schema.Menu{}.Fields()
	_ = menuFields
	// menuDescName is the schema descriptor for name field.
	menuDescName := menuFields[0].Descriptor()
	// menu.NameValidator is a validator for the "name" field. It is called by the builders before save.
	menu.NameValidator = menuDescName.Validators[0].(func(string) error)
	orderFields := schema.Order{}.Fields()
	_ = orderFields
	// orderDescOrderAt is the schema descriptor for order_at field.
	orderDescOrderAt := orderFields[0].Descriptor()
	// order.DefaultOrderAt holds the default value on creation for the order_at field.
	order.DefaultOrderAt = orderDescOrderAt.Default.(func() time.Time)
	orderfieldFields := schema.OrderField{}.Fields()
	_ = orderfieldFields
	// orderfieldDescCount is the schema descriptor for count field.
	orderfieldDescCount := orderfieldFields[0].Descriptor()
	// orderfield.CountValidator is a validator for the "count" field. It is called by the builders before save.
	orderfield.CountValidator = orderfieldDescCount.Validators[0].(func(uint16) error)
	restaurantFields := schema.Restaurant{}.Fields()
	_ = restaurantFields
	// restaurantDescName is the schema descriptor for name field.
	restaurantDescName := restaurantFields[0].Descriptor()
	// restaurant.NameValidator is a validator for the "name" field. It is called by the builders before save.
	restaurant.NameValidator = restaurantDescName.Validators[0].(func(string) error)
	reviewFields := schema.Review{}.Fields()
	_ = reviewFields
	// reviewDescTitle is the schema descriptor for title field.
	reviewDescTitle := reviewFields[1].Descriptor()
	// review.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	review.TitleValidator = reviewDescTitle.Validators[0].(func(string) error)
	// reviewDescIsDelete is the schema descriptor for is_delete field.
	reviewDescIsDelete := reviewFields[3].Descriptor()
	// review.DefaultIsDelete holds the default value on creation for the is_delete field.
	review.DefaultIsDelete = reviewDescIsDelete.Default.(bool)
}
