// Code generated by entc, DO NOT EDIT.

package category

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeMenus holds the string denoting the menus edge name in mutations.
	EdgeMenus = "menus"

	// Table holds the table name of the category in the database.
	Table = "categories"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "categories"
	// OwnerInverseTable is the table name for the Restaurant entity.
	// It exists in this package in order to avoid circular dependency with the "restaurant" package.
	OwnerInverseTable = "restaurants"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "category_owner"
	// MenusTable is the table the holds the menus relation/edge. The primary key declared below.
	MenusTable = "category_menus"
	// MenusInverseTable is the table name for the Menu entity.
	// It exists in this package in order to avoid circular dependency with the "menu" package.
	MenusInverseTable = "menus"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Category type.
var ForeignKeys = []string{
	"category_owner",
}

var (
	// MenusPrimaryKey and MenusColumn2 are the table columns denoting the
	// primary key for the menus relation (M2M).
	MenusPrimaryKey = []string{"category_id", "menu_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
