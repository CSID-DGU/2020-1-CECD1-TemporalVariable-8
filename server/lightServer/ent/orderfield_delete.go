// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"lightServer/ent/orderfield"
	"lightServer/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// OrderFieldDelete is the builder for deleting a OrderField entity.
type OrderFieldDelete struct {
	config
	hooks      []Hook
	mutation   *OrderFieldMutation
	predicates []predicate.OrderField
}

// Where adds a new predicate to the delete builder.
func (ofd *OrderFieldDelete) Where(ps ...predicate.OrderField) *OrderFieldDelete {
	ofd.predicates = append(ofd.predicates, ps...)
	return ofd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ofd *OrderFieldDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ofd.hooks) == 0 {
		affected, err = ofd.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ofd.mutation = mutation
			affected, err = ofd.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ofd.hooks) - 1; i >= 0; i-- {
			mut = ofd.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ofd.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofd *OrderFieldDelete) ExecX(ctx context.Context) int {
	n, err := ofd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ofd *OrderFieldDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: orderfield.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderfield.FieldID,
			},
		},
	}
	if ps := ofd.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, ofd.driver, _spec)
}

// OrderFieldDeleteOne is the builder for deleting a single OrderField entity.
type OrderFieldDeleteOne struct {
	ofd *OrderFieldDelete
}

// Exec executes the deletion query.
func (ofdo *OrderFieldDeleteOne) Exec(ctx context.Context) error {
	n, err := ofdo.ofd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{orderfield.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ofdo *OrderFieldDeleteOne) ExecX(ctx context.Context) {
	ofdo.ofd.ExecX(ctx)
}
