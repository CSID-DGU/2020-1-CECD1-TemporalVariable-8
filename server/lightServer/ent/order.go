// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"lightServer/ent/order"
	"lightServer/ent/restaurant"
	"lightServer/ent/user"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OrderAt holds the value of the "order_at" field.
	OrderAt time.Time `json:"order_at,omitempty"`
	// CookingAt holds the value of the "cooking_at" field.
	CookingAt *time.Time `json:"cooking_at,omitempty"`
	// DeliverAt holds the value of the "deliver_at" field.
	DeliverAt *time.Time `json:"deliver_at,omitempty"`
	// CompleteAt holds the value of the "complete_at" field.
	CompleteAt *time.Time `json:"complete_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges       OrderEdges `json:"edges"`
	order_who   *int
	order_where *int
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Who holds the value of the who edge.
	Who *User
	// Where holds the value of the where edge.
	Where *Restaurant
	// Items holds the value of the items edge.
	Items []*OrderField
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// WhoOrErr returns the Who value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) WhoOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Who == nil {
			// The edge who was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Who, nil
	}
	return nil, &NotLoadedError{edge: "who"}
}

// WhereOrErr returns the Where value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) WhereOrErr() (*Restaurant, error) {
	if e.loadedTypes[1] {
		if e.Where == nil {
			// The edge where was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: restaurant.Label}
		}
		return e.Where, nil
	}
	return nil, &NotLoadedError{edge: "where"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) ItemsOrErr() ([]*OrderField, error) {
	if e.loadedTypes[2] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // order_at
		&sql.NullTime{},  // cooking_at
		&sql.NullTime{},  // deliver_at
		&sql.NullTime{},  // complete_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Order) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // order_who
		&sql.NullInt64{}, // order_where
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(values ...interface{}) error {
	if m, n := len(values), len(order.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field order_at", values[0])
	} else if value.Valid {
		o.OrderAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field cooking_at", values[1])
	} else if value.Valid {
		o.CookingAt = new(time.Time)
		*o.CookingAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deliver_at", values[2])
	} else if value.Valid {
		o.DeliverAt = new(time.Time)
		*o.DeliverAt = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field complete_at", values[3])
	} else if value.Valid {
		o.CompleteAt = new(time.Time)
		*o.CompleteAt = value.Time
	}
	values = values[4:]
	if len(values) == len(order.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field order_who", value)
		} else if value.Valid {
			o.order_who = new(int)
			*o.order_who = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field order_where", value)
		} else if value.Valid {
			o.order_where = new(int)
			*o.order_where = int(value.Int64)
		}
	}
	return nil
}

// QueryWho queries the who edge of the Order.
func (o *Order) QueryWho() *UserQuery {
	return (&OrderClient{config: o.config}).QueryWho(o)
}

// QueryWhere queries the where edge of the Order.
func (o *Order) QueryWhere() *RestaurantQuery {
	return (&OrderClient{config: o.config}).QueryWhere(o)
}

// QueryItems queries the items edge of the Order.
func (o *Order) QueryItems() *OrderFieldQuery {
	return (&OrderClient{config: o.config}).QueryItems(o)
}

// Update returns a builder for updating this Order.
// Note that, you need to call Order.Unwrap() before calling this method, if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return (&OrderClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", order_at=")
	builder.WriteString(o.OrderAt.Format(time.ANSIC))
	if v := o.CookingAt; v != nil {
		builder.WriteString(", cooking_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := o.DeliverAt; v != nil {
		builder.WriteString(", deliver_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := o.CompleteAt; v != nil {
		builder.WriteString(", complete_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
