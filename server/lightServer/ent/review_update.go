// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lightServer/ent/order"
	"lightServer/ent/predicate"
	"lightServer/ent/review"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ReviewUpdate is the builder for updating Review entities.
type ReviewUpdate struct {
	config
	hooks      []Hook
	mutation   *ReviewMutation
	predicates []predicate.Review
}

// Where adds a new predicate for the builder.
func (ru *ReviewUpdate) Where(ps ...predicate.Review) *ReviewUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetWriteAt sets the write_at field.
func (ru *ReviewUpdate) SetWriteAt(t time.Time) *ReviewUpdate {
	ru.mutation.SetWriteAt(t)
	return ru
}

// SetTitle sets the title field.
func (ru *ReviewUpdate) SetTitle(s string) *ReviewUpdate {
	ru.mutation.SetTitle(s)
	return ru
}

// SetContents sets the contents field.
func (ru *ReviewUpdate) SetContents(s string) *ReviewUpdate {
	ru.mutation.SetContents(s)
	return ru
}

// SetIsDelete sets the is_delete field.
func (ru *ReviewUpdate) SetIsDelete(b bool) *ReviewUpdate {
	ru.mutation.SetIsDelete(b)
	return ru
}

// SetNillableIsDelete sets the is_delete field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableIsDelete(b *bool) *ReviewUpdate {
	if b != nil {
		ru.SetIsDelete(*b)
	}
	return ru
}

// SetOrderID sets the order edge to Order by id.
func (ru *ReviewUpdate) SetOrderID(id int) *ReviewUpdate {
	ru.mutation.SetOrderID(id)
	return ru
}

// SetOrder sets the order edge to Order.
func (ru *ReviewUpdate) SetOrder(o *Order) *ReviewUpdate {
	return ru.SetOrderID(o.ID)
}

// Mutation returns the ReviewMutation object of the builder.
func (ru *ReviewUpdate) Mutation() *ReviewMutation {
	return ru.mutation
}

// ClearOrder clears the "order" edge to type Order.
func (ru *ReviewUpdate) ClearOrder() *ReviewUpdate {
	ru.mutation.ClearOrder()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *ReviewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReviewUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReviewUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReviewUpdate) check() error {
	if v, ok := ru.mutation.Title(); ok {
		if err := review.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if _, ok := ru.mutation.OrderID(); ru.mutation.OrderCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"order\"")
	}
	return nil
}

func (ru *ReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   review.Table,
			Columns: review.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: review.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.WriteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: review.FieldWriteAt,
		})
	}
	if value, ok := ru.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldTitle,
		})
	}
	if value, ok := ru.mutation.Contents(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldContents,
		})
	}
	if value, ok := ru.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: review.FieldIsDelete,
		})
	}
	if ru.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.OrderTable,
			Columns: []string{review.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.OrderTable,
			Columns: []string{review.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ReviewUpdateOne is the builder for updating a single Review entity.
type ReviewUpdateOne struct {
	config
	hooks    []Hook
	mutation *ReviewMutation
}

// SetWriteAt sets the write_at field.
func (ruo *ReviewUpdateOne) SetWriteAt(t time.Time) *ReviewUpdateOne {
	ruo.mutation.SetWriteAt(t)
	return ruo
}

// SetTitle sets the title field.
func (ruo *ReviewUpdateOne) SetTitle(s string) *ReviewUpdateOne {
	ruo.mutation.SetTitle(s)
	return ruo
}

// SetContents sets the contents field.
func (ruo *ReviewUpdateOne) SetContents(s string) *ReviewUpdateOne {
	ruo.mutation.SetContents(s)
	return ruo
}

// SetIsDelete sets the is_delete field.
func (ruo *ReviewUpdateOne) SetIsDelete(b bool) *ReviewUpdateOne {
	ruo.mutation.SetIsDelete(b)
	return ruo
}

// SetNillableIsDelete sets the is_delete field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableIsDelete(b *bool) *ReviewUpdateOne {
	if b != nil {
		ruo.SetIsDelete(*b)
	}
	return ruo
}

// SetOrderID sets the order edge to Order by id.
func (ruo *ReviewUpdateOne) SetOrderID(id int) *ReviewUpdateOne {
	ruo.mutation.SetOrderID(id)
	return ruo
}

// SetOrder sets the order edge to Order.
func (ruo *ReviewUpdateOne) SetOrder(o *Order) *ReviewUpdateOne {
	return ruo.SetOrderID(o.ID)
}

// Mutation returns the ReviewMutation object of the builder.
func (ruo *ReviewUpdateOne) Mutation() *ReviewMutation {
	return ruo.mutation
}

// ClearOrder clears the "order" edge to type Order.
func (ruo *ReviewUpdateOne) ClearOrder() *ReviewUpdateOne {
	ruo.mutation.ClearOrder()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *ReviewUpdateOne) Save(ctx context.Context) (*Review, error) {
	var (
		err  error
		node *Review
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReviewUpdateOne) SaveX(ctx context.Context) *Review {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReviewUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReviewUpdateOne) check() error {
	if v, ok := ruo.mutation.Title(); ok {
		if err := review.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if _, ok := ruo.mutation.OrderID(); ruo.mutation.OrderCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"order\"")
	}
	return nil
}

func (ruo *ReviewUpdateOne) sqlSave(ctx context.Context) (_node *Review, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   review.Table,
			Columns: review.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: review.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Review.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.WriteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: review.FieldWriteAt,
		})
	}
	if value, ok := ruo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldTitle,
		})
	}
	if value, ok := ruo.mutation.Contents(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldContents,
		})
	}
	if value, ok := ruo.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: review.FieldIsDelete,
		})
	}
	if ruo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.OrderTable,
			Columns: []string{review.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.OrderTable,
			Columns: []string{review.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Review{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
