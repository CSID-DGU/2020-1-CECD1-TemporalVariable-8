// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lightServer/ent/menu"
	"lightServer/ent/orderfield"
	"lightServer/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// OrderFieldUpdate is the builder for updating OrderField entities.
type OrderFieldUpdate struct {
	config
	hooks      []Hook
	mutation   *OrderFieldMutation
	predicates []predicate.OrderField
}

// Where adds a new predicate for the builder.
func (ofu *OrderFieldUpdate) Where(ps ...predicate.OrderField) *OrderFieldUpdate {
	ofu.predicates = append(ofu.predicates, ps...)
	return ofu
}

// SetCount sets the count field.
func (ofu *OrderFieldUpdate) SetCount(u uint16) *OrderFieldUpdate {
	ofu.mutation.ResetCount()
	ofu.mutation.SetCount(u)
	return ofu
}

// AddCount adds u to count.
func (ofu *OrderFieldUpdate) AddCount(u uint16) *OrderFieldUpdate {
	ofu.mutation.AddCount(u)
	return ofu
}

// SetMenuID sets the menu edge to Menu by id.
func (ofu *OrderFieldUpdate) SetMenuID(id int) *OrderFieldUpdate {
	ofu.mutation.SetMenuID(id)
	return ofu
}

// SetMenu sets the menu edge to Menu.
func (ofu *OrderFieldUpdate) SetMenu(m *Menu) *OrderFieldUpdate {
	return ofu.SetMenuID(m.ID)
}

// Mutation returns the OrderFieldMutation object of the builder.
func (ofu *OrderFieldUpdate) Mutation() *OrderFieldMutation {
	return ofu.mutation
}

// ClearMenu clears the "menu" edge to type Menu.
func (ofu *OrderFieldUpdate) ClearMenu() *OrderFieldUpdate {
	ofu.mutation.ClearMenu()
	return ofu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ofu *OrderFieldUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ofu.hooks) == 0 {
		if err = ofu.check(); err != nil {
			return 0, err
		}
		affected, err = ofu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ofu.check(); err != nil {
				return 0, err
			}
			ofu.mutation = mutation
			affected, err = ofu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ofu.hooks) - 1; i >= 0; i-- {
			mut = ofu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ofu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ofu *OrderFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := ofu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ofu *OrderFieldUpdate) Exec(ctx context.Context) error {
	_, err := ofu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofu *OrderFieldUpdate) ExecX(ctx context.Context) {
	if err := ofu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ofu *OrderFieldUpdate) check() error {
	if v, ok := ofu.mutation.Count(); ok {
		if err := orderfield.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf("ent: validator failed for field \"count\": %w", err)}
		}
	}
	if _, ok := ofu.mutation.MenuID(); ofu.mutation.MenuCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"menu\"")
	}
	return nil
}

func (ofu *OrderFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderfield.Table,
			Columns: orderfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderfield.FieldID,
			},
		},
	}
	if ps := ofu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ofu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: orderfield.FieldCount,
		})
	}
	if value, ok := ofu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: orderfield.FieldCount,
		})
	}
	if ofu.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderfield.MenuTable,
			Columns: []string{orderfield.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofu.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderfield.MenuTable,
			Columns: []string{orderfield.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ofu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderfield.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderFieldUpdateOne is the builder for updating a single OrderField entity.
type OrderFieldUpdateOne struct {
	config
	hooks    []Hook
	mutation *OrderFieldMutation
}

// SetCount sets the count field.
func (ofuo *OrderFieldUpdateOne) SetCount(u uint16) *OrderFieldUpdateOne {
	ofuo.mutation.ResetCount()
	ofuo.mutation.SetCount(u)
	return ofuo
}

// AddCount adds u to count.
func (ofuo *OrderFieldUpdateOne) AddCount(u uint16) *OrderFieldUpdateOne {
	ofuo.mutation.AddCount(u)
	return ofuo
}

// SetMenuID sets the menu edge to Menu by id.
func (ofuo *OrderFieldUpdateOne) SetMenuID(id int) *OrderFieldUpdateOne {
	ofuo.mutation.SetMenuID(id)
	return ofuo
}

// SetMenu sets the menu edge to Menu.
func (ofuo *OrderFieldUpdateOne) SetMenu(m *Menu) *OrderFieldUpdateOne {
	return ofuo.SetMenuID(m.ID)
}

// Mutation returns the OrderFieldMutation object of the builder.
func (ofuo *OrderFieldUpdateOne) Mutation() *OrderFieldMutation {
	return ofuo.mutation
}

// ClearMenu clears the "menu" edge to type Menu.
func (ofuo *OrderFieldUpdateOne) ClearMenu() *OrderFieldUpdateOne {
	ofuo.mutation.ClearMenu()
	return ofuo
}

// Save executes the query and returns the updated entity.
func (ofuo *OrderFieldUpdateOne) Save(ctx context.Context) (*OrderField, error) {
	var (
		err  error
		node *OrderField
	)
	if len(ofuo.hooks) == 0 {
		if err = ofuo.check(); err != nil {
			return nil, err
		}
		node, err = ofuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ofuo.check(); err != nil {
				return nil, err
			}
			ofuo.mutation = mutation
			node, err = ofuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ofuo.hooks) - 1; i >= 0; i-- {
			mut = ofuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ofuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ofuo *OrderFieldUpdateOne) SaveX(ctx context.Context) *OrderField {
	node, err := ofuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ofuo *OrderFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := ofuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofuo *OrderFieldUpdateOne) ExecX(ctx context.Context) {
	if err := ofuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ofuo *OrderFieldUpdateOne) check() error {
	if v, ok := ofuo.mutation.Count(); ok {
		if err := orderfield.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf("ent: validator failed for field \"count\": %w", err)}
		}
	}
	if _, ok := ofuo.mutation.MenuID(); ofuo.mutation.MenuCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"menu\"")
	}
	return nil
}

func (ofuo *OrderFieldUpdateOne) sqlSave(ctx context.Context) (_node *OrderField, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderfield.Table,
			Columns: orderfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderfield.FieldID,
			},
		},
	}
	id, ok := ofuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderField.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ofuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: orderfield.FieldCount,
		})
	}
	if value, ok := ofuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: orderfield.FieldCount,
		})
	}
	if ofuo.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderfield.MenuTable,
			Columns: []string{orderfield.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ofuo.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderfield.MenuTable,
			Columns: []string{orderfield.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderField{config: ofuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ofuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderfield.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
