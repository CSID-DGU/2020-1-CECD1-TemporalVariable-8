// Code generated by entc, DO NOT EDIT.

package restaurant

const (
	// Label holds the string label denoting the restaurant type in the database.
	Label = "restaurant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURI holds the string denoting the uri field in the database.
	FieldURI = "uri"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeAvatar holds the string denoting the avatar edge name in mutations.
	EdgeAvatar = "avatar"
	// EdgeRoot holds the string denoting the root edge name in mutations.
	EdgeRoot = "root"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeHistories holds the string denoting the histories edge name in mutations.
	EdgeHistories = "histories"
	// EdgeCategories holds the string denoting the categories edge name in mutations.
	EdgeCategories = "categories"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeMenus holds the string denoting the menus edge name in mutations.
	EdgeMenus = "menus"

	// Table holds the table name of the restaurant in the database.
	Table = "restaurants"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "restaurants"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "restaurant_owner"
	// AvatarTable is the table the holds the avatar relation/edge.
	AvatarTable = "restaurants"
	// AvatarInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	AvatarInverseTable = "files"
	// AvatarColumn is the table column denoting the avatar relation/edge.
	AvatarColumn = "restaurant_avatar"
	// RootTable is the table the holds the root relation/edge.
	RootTable = "restaurants"
	// RootColumn is the table column denoting the root relation/edge.
	RootColumn = "restaurant_root"
	// ChildrenTable is the table the holds the children relation/edge.
	ChildrenTable = "restaurants"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "restaurant_parent"
	// ParentTable is the table the holds the parent relation/edge.
	ParentTable = "restaurants"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "restaurant_parent"
	// HistoriesTable is the table the holds the histories relation/edge. The primary key declared below.
	HistoriesTable = "restaurant_histories"
	// HistoriesInverseTable is the table name for the History entity.
	// It exists in this package in order to avoid circular dependency with the "history" package.
	HistoriesInverseTable = "histories"
	// CategoriesTable is the table the holds the categories relation/edge.
	CategoriesTable = "categories"
	// CategoriesInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoriesInverseTable = "categories"
	// CategoriesColumn is the table column denoting the categories relation/edge.
	CategoriesColumn = "category_owner"
	// OrdersTable is the table the holds the orders relation/edge.
	OrdersTable = "orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "order_where"
	// MenusTable is the table the holds the menus relation/edge.
	MenusTable = "menus"
	// MenusInverseTable is the table name for the Menu entity.
	// It exists in this package in order to avoid circular dependency with the "menu" package.
	MenusInverseTable = "menus"
	// MenusColumn is the table column denoting the menus relation/edge.
	MenusColumn = "menu_owner"
)

// Columns holds all SQL columns for restaurant fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldURI,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Restaurant type.
var ForeignKeys = []string{
	"restaurant_owner",
	"restaurant_avatar",
	"restaurant_root",
	"restaurant_parent",
}

var (
	// HistoriesPrimaryKey and HistoriesColumn2 are the table columns denoting the
	// primary key for the histories relation (M2M).
	HistoriesPrimaryKey = []string{"restaurant_id", "history_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
