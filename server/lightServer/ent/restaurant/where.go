// Code generated by entc, DO NOT EDIT.

package restaurant

import (
	"lightServer/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// SubName applies equality check predicate on the "sub_name" field. It's identical to SubNameEQ.
func SubName(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubName), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Restaurant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaurant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Restaurant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaurant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SubNameEQ applies the EQ predicate on the "sub_name" field.
func SubNameEQ(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubName), v))
	})
}

// SubNameNEQ applies the NEQ predicate on the "sub_name" field.
func SubNameNEQ(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubName), v))
	})
}

// SubNameIn applies the In predicate on the "sub_name" field.
func SubNameIn(vs ...string) predicate.Restaurant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaurant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubName), v...))
	})
}

// SubNameNotIn applies the NotIn predicate on the "sub_name" field.
func SubNameNotIn(vs ...string) predicate.Restaurant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Restaurant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubName), v...))
	})
}

// SubNameGT applies the GT predicate on the "sub_name" field.
func SubNameGT(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubName), v))
	})
}

// SubNameGTE applies the GTE predicate on the "sub_name" field.
func SubNameGTE(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubName), v))
	})
}

// SubNameLT applies the LT predicate on the "sub_name" field.
func SubNameLT(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubName), v))
	})
}

// SubNameLTE applies the LTE predicate on the "sub_name" field.
func SubNameLTE(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubName), v))
	})
}

// SubNameContains applies the Contains predicate on the "sub_name" field.
func SubNameContains(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubName), v))
	})
}

// SubNameHasPrefix applies the HasPrefix predicate on the "sub_name" field.
func SubNameHasPrefix(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubName), v))
	})
}

// SubNameHasSuffix applies the HasSuffix predicate on the "sub_name" field.
func SubNameHasSuffix(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubName), v))
	})
}

// SubNameIsNil applies the IsNil predicate on the "sub_name" field.
func SubNameIsNil() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubName)))
	})
}

// SubNameNotNil applies the NotNil predicate on the "sub_name" field.
func SubNameNotNil() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubName)))
	})
}

// SubNameEqualFold applies the EqualFold predicate on the "sub_name" field.
func SubNameEqualFold(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubName), v))
	})
}

// SubNameContainsFold applies the ContainsFold predicate on the "sub_name" field.
func SubNameContainsFold(v string) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubName), v))
	})
}

// URIIsNil applies the IsNil predicate on the "uri" field.
func URIIsNil() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldURI)))
	})
}

// URINotNil applies the NotNil predicate on the "uri" field.
func URINotNil() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldURI)))
	})
}

// HasAvatar applies the HasEdge predicate on the "avatar" edge.
func HasAvatar() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AvatarTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AvatarTable, AvatarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAvatarWith applies the HasEdge predicate on the "avatar" edge with a given conditions (other predicates).
func HasAvatarWith(preds ...predicate.File) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AvatarInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AvatarTable, AvatarColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoot applies the HasEdge predicate on the "root" edge.
func HasRoot() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RootTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RootTable, RootColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRootWith applies the HasEdge predicate on the "root" edge with a given conditions (other predicates).
func HasRootWith(preds ...predicate.Restaurant) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RootTable, RootColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Restaurant) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Restaurant) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHistories applies the HasEdge predicate on the "histories" edge.
func HasHistories() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HistoriesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HistoriesTable, HistoriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHistoriesWith applies the HasEdge predicate on the "histories" edge with a given conditions (other predicates).
func HasHistoriesWith(preds ...predicate.History) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HistoriesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HistoriesTable, HistoriesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMenus applies the HasEdge predicate on the "menus" edge.
func HasMenus() predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MenusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MenusTable, MenusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenusWith applies the HasEdge predicate on the "menus" edge with a given conditions (other predicates).
func HasMenusWith(preds ...predicate.Menu) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MenusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MenusTable, MenusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Restaurant) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Restaurant) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Restaurant) predicate.Restaurant {
	return predicate.Restaurant(func(s *sql.Selector) {
		p(s.Not())
	})
}
