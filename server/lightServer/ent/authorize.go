// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"lightServer/ent/authorize"
	"lightServer/ent/user"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Authorize is the model entity for the Authorize schema.
type Authorize struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider authorize.Provider `json:"provider,omitempty"`
	// ServiceID holds the value of the "service_id" field.
	ServiceID string `json:"service_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthorizeQuery when eager-loading is set.
	Edges      AuthorizeEdges `json:"edges"`
	user_auths *int
}

// AuthorizeEdges holds the relations/edges for other nodes in the graph.
type AuthorizeEdges struct {
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthorizeEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Authorize) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // provider
		&sql.NullString{}, // service_id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Authorize) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_auths
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Authorize fields.
func (a *Authorize) assignValues(values ...interface{}) error {
	if m, n := len(values), len(authorize.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field provider", values[0])
	} else if value.Valid {
		a.Provider = authorize.Provider(value.String)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field service_id", values[1])
	} else if value.Valid {
		a.ServiceID = value.String
	}
	values = values[2:]
	if len(values) == len(authorize.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_auths", value)
		} else if value.Valid {
			a.user_auths = new(int)
			*a.user_auths = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Authorize.
func (a *Authorize) QueryUser() *UserQuery {
	return (&AuthorizeClient{config: a.config}).QueryUser(a)
}

// Update returns a builder for updating this Authorize.
// Note that, you need to call Authorize.Unwrap() before calling this method, if this Authorize
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Authorize) Update() *AuthorizeUpdateOne {
	return (&AuthorizeClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Authorize) Unwrap() *Authorize {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Authorize is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Authorize) String() string {
	var builder strings.Builder
	builder.WriteString("Authorize(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", provider=")
	builder.WriteString(fmt.Sprintf("%v", a.Provider))
	builder.WriteString(", service_id=")
	builder.WriteString(a.ServiceID)
	builder.WriteByte(')')
	return builder.String()
}

// Authorizes is a parsable slice of Authorize.
type Authorizes []*Authorize

func (a Authorizes) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
