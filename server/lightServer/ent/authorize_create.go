// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lightServer/ent/authorize"
	"lightServer/ent/user"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AuthorizeCreate is the builder for creating a Authorize entity.
type AuthorizeCreate struct {
	config
	mutation *AuthorizeMutation
	hooks    []Hook
}

// SetProvider sets the provider field.
func (ac *AuthorizeCreate) SetProvider(a authorize.Provider) *AuthorizeCreate {
	ac.mutation.SetProvider(a)
	return ac
}

// SetServiceID sets the service_id field.
func (ac *AuthorizeCreate) SetServiceID(s string) *AuthorizeCreate {
	ac.mutation.SetServiceID(s)
	return ac
}

// SetUserID sets the user edge to User by id.
func (ac *AuthorizeCreate) SetUserID(id int) *AuthorizeCreate {
	ac.mutation.SetUserID(id)
	return ac
}

// SetUser sets the user edge to User.
func (ac *AuthorizeCreate) SetUser(u *User) *AuthorizeCreate {
	return ac.SetUserID(u.ID)
}

// Mutation returns the AuthorizeMutation object of the builder.
func (ac *AuthorizeCreate) Mutation() *AuthorizeMutation {
	return ac.mutation
}

// Save creates the Authorize in the database.
func (ac *AuthorizeCreate) Save(ctx context.Context) (*Authorize, error) {
	var (
		err  error
		node *Authorize
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthorizeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AuthorizeCreate) SaveX(ctx context.Context) *Authorize {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ac *AuthorizeCreate) check() error {
	if _, ok := ac.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New("ent: missing required field \"provider\"")}
	}
	if v, ok := ac.mutation.Provider(); ok {
		if err := authorize.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf("ent: validator failed for field \"provider\": %w", err)}
		}
	}
	if _, ok := ac.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New("ent: missing required field \"service_id\"")}
	}
	if v, ok := ac.mutation.ServiceID(); ok {
		if err := authorize.ServiceIDValidator(v); err != nil {
			return &ValidationError{Name: "service_id", err: fmt.Errorf("ent: validator failed for field \"service_id\": %w", err)}
		}
	}
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (ac *AuthorizeCreate) sqlSave(ctx context.Context) (*Authorize, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AuthorizeCreate) createSpec() (*Authorize, *sqlgraph.CreateSpec) {
	var (
		_node = &Authorize{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authorize.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authorize.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Provider(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authorize.FieldProvider,
		})
		_node.Provider = value
	}
	if value, ok := ac.mutation.ServiceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authorize.FieldServiceID,
		})
		_node.ServiceID = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authorize.UserTable,
			Columns: []string{authorize.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthorizeCreateBulk is the builder for creating a bulk of Authorize entities.
type AuthorizeCreateBulk struct {
	config
	builders []*AuthorizeCreate
}

// Save creates the Authorize entities in the database.
func (acb *AuthorizeCreateBulk) Save(ctx context.Context) ([]*Authorize, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Authorize, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthorizeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (acb *AuthorizeCreateBulk) SaveX(ctx context.Context) []*Authorize {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
