// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lightServer/ent/category"
	"lightServer/ent/file"
	"lightServer/ent/history"
	"lightServer/ent/menu"
	"lightServer/ent/order"
	"lightServer/ent/restaurant"
	"lightServer/ent/user"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RestaurantCreate is the builder for creating a Restaurant entity.
type RestaurantCreate struct {
	config
	mutation *RestaurantMutation
	hooks    []Hook
}

// SetName sets the name field.
func (rc *RestaurantCreate) SetName(s string) *RestaurantCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDescription sets the description field.
func (rc *RestaurantCreate) SetDescription(s string) *RestaurantCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the description field if the given value is not nil.
func (rc *RestaurantCreate) SetNillableDescription(s *string) *RestaurantCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetURI sets the uri field.
func (rc *RestaurantCreate) SetURI(s string) *RestaurantCreate {
	rc.mutation.SetURI(s)
	return rc
}

// SetNillableURI sets the uri field if the given value is not nil.
func (rc *RestaurantCreate) SetNillableURI(s *string) *RestaurantCreate {
	if s != nil {
		rc.SetURI(*s)
	}
	return rc
}

// SetOwnerID sets the owner edge to User by id.
func (rc *RestaurantCreate) SetOwnerID(id int) *RestaurantCreate {
	rc.mutation.SetOwnerID(id)
	return rc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (rc *RestaurantCreate) SetNillableOwnerID(id *int) *RestaurantCreate {
	if id != nil {
		rc = rc.SetOwnerID(*id)
	}
	return rc
}

// SetOwner sets the owner edge to User.
func (rc *RestaurantCreate) SetOwner(u *User) *RestaurantCreate {
	return rc.SetOwnerID(u.ID)
}

// SetAvatarID sets the avatar edge to File by id.
func (rc *RestaurantCreate) SetAvatarID(id int) *RestaurantCreate {
	rc.mutation.SetAvatarID(id)
	return rc
}

// SetNillableAvatarID sets the avatar edge to File by id if the given value is not nil.
func (rc *RestaurantCreate) SetNillableAvatarID(id *int) *RestaurantCreate {
	if id != nil {
		rc = rc.SetAvatarID(*id)
	}
	return rc
}

// SetAvatar sets the avatar edge to File.
func (rc *RestaurantCreate) SetAvatar(f *File) *RestaurantCreate {
	return rc.SetAvatarID(f.ID)
}

// SetRootID sets the root edge to Restaurant by id.
func (rc *RestaurantCreate) SetRootID(id int) *RestaurantCreate {
	rc.mutation.SetRootID(id)
	return rc
}

// SetNillableRootID sets the root edge to Restaurant by id if the given value is not nil.
func (rc *RestaurantCreate) SetNillableRootID(id *int) *RestaurantCreate {
	if id != nil {
		rc = rc.SetRootID(*id)
	}
	return rc
}

// SetRoot sets the root edge to Restaurant.
func (rc *RestaurantCreate) SetRoot(r *Restaurant) *RestaurantCreate {
	return rc.SetRootID(r.ID)
}

// AddChildIDs adds the children edge to Restaurant by ids.
func (rc *RestaurantCreate) AddChildIDs(ids ...int) *RestaurantCreate {
	rc.mutation.AddChildIDs(ids...)
	return rc
}

// AddChildren adds the children edges to Restaurant.
func (rc *RestaurantCreate) AddChildren(r ...*Restaurant) *RestaurantCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddChildIDs(ids...)
}

// SetParentID sets the parent edge to Restaurant by id.
func (rc *RestaurantCreate) SetParentID(id int) *RestaurantCreate {
	rc.mutation.SetParentID(id)
	return rc
}

// SetNillableParentID sets the parent edge to Restaurant by id if the given value is not nil.
func (rc *RestaurantCreate) SetNillableParentID(id *int) *RestaurantCreate {
	if id != nil {
		rc = rc.SetParentID(*id)
	}
	return rc
}

// SetParent sets the parent edge to Restaurant.
func (rc *RestaurantCreate) SetParent(r *Restaurant) *RestaurantCreate {
	return rc.SetParentID(r.ID)
}

// AddHistoryIDs adds the histories edge to History by ids.
func (rc *RestaurantCreate) AddHistoryIDs(ids ...int) *RestaurantCreate {
	rc.mutation.AddHistoryIDs(ids...)
	return rc
}

// AddHistories adds the histories edges to History.
func (rc *RestaurantCreate) AddHistories(h ...*History) *RestaurantCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return rc.AddHistoryIDs(ids...)
}

// AddCategoryIDs adds the categories edge to Category by ids.
func (rc *RestaurantCreate) AddCategoryIDs(ids ...int) *RestaurantCreate {
	rc.mutation.AddCategoryIDs(ids...)
	return rc
}

// AddCategories adds the categories edges to Category.
func (rc *RestaurantCreate) AddCategories(c ...*Category) *RestaurantCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddCategoryIDs(ids...)
}

// AddOrderIDs adds the orders edge to Order by ids.
func (rc *RestaurantCreate) AddOrderIDs(ids ...int) *RestaurantCreate {
	rc.mutation.AddOrderIDs(ids...)
	return rc
}

// AddOrders adds the orders edges to Order.
func (rc *RestaurantCreate) AddOrders(o ...*Order) *RestaurantCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return rc.AddOrderIDs(ids...)
}

// AddMenuIDs adds the menus edge to Menu by ids.
func (rc *RestaurantCreate) AddMenuIDs(ids ...int) *RestaurantCreate {
	rc.mutation.AddMenuIDs(ids...)
	return rc
}

// AddMenus adds the menus edges to Menu.
func (rc *RestaurantCreate) AddMenus(m ...*Menu) *RestaurantCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return rc.AddMenuIDs(ids...)
}

// Mutation returns the RestaurantMutation object of the builder.
func (rc *RestaurantCreate) Mutation() *RestaurantMutation {
	return rc.mutation
}

// Save creates the Restaurant in the database.
func (rc *RestaurantCreate) Save(ctx context.Context) (*Restaurant, error) {
	var (
		err  error
		node *Restaurant
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaurantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RestaurantCreate) SaveX(ctx context.Context) *Restaurant {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rc *RestaurantCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := restaurant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rc *RestaurantCreate) sqlSave(ctx context.Context) (*Restaurant, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RestaurantCreate) createSpec() (*Restaurant, *sqlgraph.CreateSpec) {
	var (
		_node = &Restaurant{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: restaurant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: restaurant.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := rc.mutation.URI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldURI,
		})
		_node.URI = value
	}
	if nodes := rc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AvatarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.AvatarTable,
			Columns: []string{restaurant.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   restaurant.RootTable,
			Columns: []string{restaurant.RootColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.ChildrenTable,
			Columns: []string{restaurant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.ParentTable,
			Columns: []string{restaurant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.HistoriesTable,
			Columns: restaurant.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.CategoriesTable,
			Columns: []string{restaurant.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OrdersTable,
			Columns: []string{restaurant.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.MenusTable,
			Columns: []string{restaurant.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RestaurantCreateBulk is the builder for creating a bulk of Restaurant entities.
type RestaurantCreateBulk struct {
	config
	builders []*RestaurantCreate
}

// Save creates the Restaurant entities in the database.
func (rcb *RestaurantCreateBulk) Save(ctx context.Context) ([]*Restaurant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Restaurant, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RestaurantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rcb *RestaurantCreateBulk) SaveX(ctx context.Context) []*Restaurant {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
