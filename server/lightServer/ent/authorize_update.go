// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lightServer/ent/authorize"
	"lightServer/ent/predicate"
	"lightServer/ent/user"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AuthorizeUpdate is the builder for updating Authorize entities.
type AuthorizeUpdate struct {
	config
	hooks      []Hook
	mutation   *AuthorizeMutation
	predicates []predicate.Authorize
}

// Where adds a new predicate for the builder.
func (au *AuthorizeUpdate) Where(ps ...predicate.Authorize) *AuthorizeUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetProvider sets the provider field.
func (au *AuthorizeUpdate) SetProvider(a authorize.Provider) *AuthorizeUpdate {
	au.mutation.SetProvider(a)
	return au
}

// SetServiceID sets the service_id field.
func (au *AuthorizeUpdate) SetServiceID(s string) *AuthorizeUpdate {
	au.mutation.SetServiceID(s)
	return au
}

// SetUserID sets the user edge to User by id.
func (au *AuthorizeUpdate) SetUserID(id int) *AuthorizeUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetUser sets the user edge to User.
func (au *AuthorizeUpdate) SetUser(u *User) *AuthorizeUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AuthorizeMutation object of the builder.
func (au *AuthorizeUpdate) Mutation() *AuthorizeMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to type User.
func (au *AuthorizeUpdate) ClearUser() *AuthorizeUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AuthorizeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthorizeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthorizeUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthorizeUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthorizeUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AuthorizeUpdate) check() error {
	if v, ok := au.mutation.Provider(); ok {
		if err := authorize.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf("ent: validator failed for field \"provider\": %w", err)}
		}
	}
	if v, ok := au.mutation.ServiceID(); ok {
		if err := authorize.ServiceIDValidator(v); err != nil {
			return &ValidationError{Name: "service_id", err: fmt.Errorf("ent: validator failed for field \"service_id\": %w", err)}
		}
	}
	if _, ok := au.mutation.UserID(); au.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (au *AuthorizeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authorize.Table,
			Columns: authorize.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authorize.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Provider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authorize.FieldProvider,
		})
	}
	if value, ok := au.mutation.ServiceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authorize.FieldServiceID,
		})
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authorize.UserTable,
			Columns: []string{authorize.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authorize.UserTable,
			Columns: []string{authorize.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorize.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AuthorizeUpdateOne is the builder for updating a single Authorize entity.
type AuthorizeUpdateOne struct {
	config
	hooks    []Hook
	mutation *AuthorizeMutation
}

// SetProvider sets the provider field.
func (auo *AuthorizeUpdateOne) SetProvider(a authorize.Provider) *AuthorizeUpdateOne {
	auo.mutation.SetProvider(a)
	return auo
}

// SetServiceID sets the service_id field.
func (auo *AuthorizeUpdateOne) SetServiceID(s string) *AuthorizeUpdateOne {
	auo.mutation.SetServiceID(s)
	return auo
}

// SetUserID sets the user edge to User by id.
func (auo *AuthorizeUpdateOne) SetUserID(id int) *AuthorizeUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetUser sets the user edge to User.
func (auo *AuthorizeUpdateOne) SetUser(u *User) *AuthorizeUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AuthorizeMutation object of the builder.
func (auo *AuthorizeUpdateOne) Mutation() *AuthorizeMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to type User.
func (auo *AuthorizeUpdateOne) ClearUser() *AuthorizeUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *AuthorizeUpdateOne) Save(ctx context.Context) (*Authorize, error) {
	var (
		err  error
		node *Authorize
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthorizeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthorizeUpdateOne) SaveX(ctx context.Context) *Authorize {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthorizeUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthorizeUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AuthorizeUpdateOne) check() error {
	if v, ok := auo.mutation.Provider(); ok {
		if err := authorize.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf("ent: validator failed for field \"provider\": %w", err)}
		}
	}
	if v, ok := auo.mutation.ServiceID(); ok {
		if err := authorize.ServiceIDValidator(v); err != nil {
			return &ValidationError{Name: "service_id", err: fmt.Errorf("ent: validator failed for field \"service_id\": %w", err)}
		}
	}
	if _, ok := auo.mutation.UserID(); auo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (auo *AuthorizeUpdateOne) sqlSave(ctx context.Context) (_node *Authorize, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authorize.Table,
			Columns: authorize.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authorize.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Authorize.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.Provider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authorize.FieldProvider,
		})
	}
	if value, ok := auo.mutation.ServiceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authorize.FieldServiceID,
		})
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authorize.UserTable,
			Columns: []string{authorize.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authorize.UserTable,
			Columns: []string{authorize.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Authorize{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorize.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
