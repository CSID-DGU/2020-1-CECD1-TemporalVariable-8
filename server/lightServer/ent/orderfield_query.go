// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lightServer/ent/menu"
	"lightServer/ent/orderfield"
	"lightServer/ent/predicate"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// OrderFieldQuery is the builder for querying OrderField entities.
type OrderFieldQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.OrderField
	// eager-loading edges.
	withMenu *MenuQuery
	withFKs  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (ofq *OrderFieldQuery) Where(ps ...predicate.OrderField) *OrderFieldQuery {
	ofq.predicates = append(ofq.predicates, ps...)
	return ofq
}

// Limit adds a limit step to the query.
func (ofq *OrderFieldQuery) Limit(limit int) *OrderFieldQuery {
	ofq.limit = &limit
	return ofq
}

// Offset adds an offset step to the query.
func (ofq *OrderFieldQuery) Offset(offset int) *OrderFieldQuery {
	ofq.offset = &offset
	return ofq
}

// Order adds an order step to the query.
func (ofq *OrderFieldQuery) Order(o ...OrderFunc) *OrderFieldQuery {
	ofq.order = append(ofq.order, o...)
	return ofq
}

// QueryMenu chains the current query on the menu edge.
func (ofq *OrderFieldQuery) QueryMenu() *MenuQuery {
	query := &MenuQuery{config: ofq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ofq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ofq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderfield.Table, orderfield.FieldID, selector),
			sqlgraph.To(menu.Table, menu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderfield.MenuTable, orderfield.MenuColumn),
		)
		fromU = sqlgraph.SetNeighbors(ofq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderField entity in the query. Returns *NotFoundError when no orderfield was found.
func (ofq *OrderFieldQuery) First(ctx context.Context) (*OrderField, error) {
	nodes, err := ofq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderfield.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ofq *OrderFieldQuery) FirstX(ctx context.Context) *OrderField {
	node, err := ofq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderField id in the query. Returns *NotFoundError when no id was found.
func (ofq *OrderFieldQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ofq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderfield.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (ofq *OrderFieldQuery) FirstXID(ctx context.Context) int {
	id, err := ofq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only OrderField entity in the query, returns an error if not exactly one entity was returned.
func (ofq *OrderFieldQuery) Only(ctx context.Context) (*OrderField, error) {
	nodes, err := ofq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderfield.Label}
	default:
		return nil, &NotSingularError{orderfield.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ofq *OrderFieldQuery) OnlyX(ctx context.Context) *OrderField {
	node, err := ofq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only OrderField id in the query, returns an error if not exactly one id was returned.
func (ofq *OrderFieldQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ofq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderfield.Label}
	default:
		err = &NotSingularError{orderfield.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ofq *OrderFieldQuery) OnlyIDX(ctx context.Context) int {
	id, err := ofq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderFields.
func (ofq *OrderFieldQuery) All(ctx context.Context) ([]*OrderField, error) {
	if err := ofq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ofq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ofq *OrderFieldQuery) AllX(ctx context.Context) []*OrderField {
	nodes, err := ofq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderField ids.
func (ofq *OrderFieldQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ofq.Select(orderfield.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ofq *OrderFieldQuery) IDsX(ctx context.Context) []int {
	ids, err := ofq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ofq *OrderFieldQuery) Count(ctx context.Context) (int, error) {
	if err := ofq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ofq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ofq *OrderFieldQuery) CountX(ctx context.Context) int {
	count, err := ofq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ofq *OrderFieldQuery) Exist(ctx context.Context) (bool, error) {
	if err := ofq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ofq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ofq *OrderFieldQuery) ExistX(ctx context.Context) bool {
	exist, err := ofq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ofq *OrderFieldQuery) Clone() *OrderFieldQuery {
	return &OrderFieldQuery{
		config:     ofq.config,
		limit:      ofq.limit,
		offset:     ofq.offset,
		order:      append([]OrderFunc{}, ofq.order...),
		unique:     append([]string{}, ofq.unique...),
		predicates: append([]predicate.OrderField{}, ofq.predicates...),
		// clone intermediate query.
		sql:  ofq.sql.Clone(),
		path: ofq.path,
	}
}

//  WithMenu tells the query-builder to eager-loads the nodes that are connected to
// the "menu" edge. The optional arguments used to configure the query builder of the edge.
func (ofq *OrderFieldQuery) WithMenu(opts ...func(*MenuQuery)) *OrderFieldQuery {
	query := &MenuQuery{config: ofq.config}
	for _, opt := range opts {
		opt(query)
	}
	ofq.withMenu = query
	return ofq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Count uint16 `json:"count,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderField.Query().
//		GroupBy(orderfield.FieldCount).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ofq *OrderFieldQuery) GroupBy(field string, fields ...string) *OrderFieldGroupBy {
	group := &OrderFieldGroupBy{config: ofq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ofq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ofq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Count uint16 `json:"count,omitempty"`
//	}
//
//	client.OrderField.Query().
//		Select(orderfield.FieldCount).
//		Scan(ctx, &v)
//
func (ofq *OrderFieldQuery) Select(field string, fields ...string) *OrderFieldSelect {
	selector := &OrderFieldSelect{config: ofq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ofq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ofq.sqlQuery(), nil
	}
	return selector
}

func (ofq *OrderFieldQuery) prepareQuery(ctx context.Context) error {
	if ofq.path != nil {
		prev, err := ofq.path(ctx)
		if err != nil {
			return err
		}
		ofq.sql = prev
	}
	return nil
}

func (ofq *OrderFieldQuery) sqlAll(ctx context.Context) ([]*OrderField, error) {
	var (
		nodes       = []*OrderField{}
		withFKs     = ofq.withFKs
		_spec       = ofq.querySpec()
		loadedTypes = [1]bool{
			ofq.withMenu != nil,
		}
	)
	if ofq.withMenu != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, orderfield.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &OrderField{config: ofq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, ofq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ofq.withMenu; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderField)
		for i := range nodes {
			if fk := nodes[i].order_field_menu; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(menu.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_field_menu" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Menu = n
			}
		}
	}

	return nodes, nil
}

func (ofq *OrderFieldQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ofq.querySpec()
	return sqlgraph.CountNodes(ctx, ofq.driver, _spec)
}

func (ofq *OrderFieldQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ofq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (ofq *OrderFieldQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderfield.Table,
			Columns: orderfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderfield.FieldID,
			},
		},
		From:   ofq.sql,
		Unique: true,
	}
	if ps := ofq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ofq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ofq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ofq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, orderfield.ValidColumn)
			}
		}
	}
	return _spec
}

func (ofq *OrderFieldQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(ofq.driver.Dialect())
	t1 := builder.Table(orderfield.Table)
	selector := builder.Select(t1.Columns(orderfield.Columns...)...).From(t1)
	if ofq.sql != nil {
		selector = ofq.sql
		selector.Select(selector.Columns(orderfield.Columns...)...)
	}
	for _, p := range ofq.predicates {
		p(selector)
	}
	for _, p := range ofq.order {
		p(selector, orderfield.ValidColumn)
	}
	if offset := ofq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ofq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderFieldGroupBy is the builder for group-by OrderField entities.
type OrderFieldGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ofgb *OrderFieldGroupBy) Aggregate(fns ...AggregateFunc) *OrderFieldGroupBy {
	ofgb.fns = append(ofgb.fns, fns...)
	return ofgb
}

// Scan applies the group-by query and scan the result into the given value.
func (ofgb *OrderFieldGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ofgb.path(ctx)
	if err != nil {
		return err
	}
	ofgb.sql = query
	return ofgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ofgb *OrderFieldGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ofgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (ofgb *OrderFieldGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ofgb.fields) > 1 {
		return nil, errors.New("ent: OrderFieldGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ofgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ofgb *OrderFieldGroupBy) StringsX(ctx context.Context) []string {
	v, err := ofgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (ofgb *OrderFieldGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ofgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderfield.Label}
	default:
		err = fmt.Errorf("ent: OrderFieldGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ofgb *OrderFieldGroupBy) StringX(ctx context.Context) string {
	v, err := ofgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (ofgb *OrderFieldGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ofgb.fields) > 1 {
		return nil, errors.New("ent: OrderFieldGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ofgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ofgb *OrderFieldGroupBy) IntsX(ctx context.Context) []int {
	v, err := ofgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (ofgb *OrderFieldGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ofgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderfield.Label}
	default:
		err = fmt.Errorf("ent: OrderFieldGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ofgb *OrderFieldGroupBy) IntX(ctx context.Context) int {
	v, err := ofgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (ofgb *OrderFieldGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ofgb.fields) > 1 {
		return nil, errors.New("ent: OrderFieldGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ofgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ofgb *OrderFieldGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ofgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (ofgb *OrderFieldGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ofgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderfield.Label}
	default:
		err = fmt.Errorf("ent: OrderFieldGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ofgb *OrderFieldGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ofgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (ofgb *OrderFieldGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ofgb.fields) > 1 {
		return nil, errors.New("ent: OrderFieldGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ofgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ofgb *OrderFieldGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ofgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (ofgb *OrderFieldGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ofgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderfield.Label}
	default:
		err = fmt.Errorf("ent: OrderFieldGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ofgb *OrderFieldGroupBy) BoolX(ctx context.Context) bool {
	v, err := ofgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ofgb *OrderFieldGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ofgb.fields {
		if !orderfield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ofgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ofgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ofgb *OrderFieldGroupBy) sqlQuery() *sql.Selector {
	selector := ofgb.sql
	columns := make([]string, 0, len(ofgb.fields)+len(ofgb.fns))
	columns = append(columns, ofgb.fields...)
	for _, fn := range ofgb.fns {
		columns = append(columns, fn(selector, orderfield.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(ofgb.fields...)
}

// OrderFieldSelect is the builder for select fields of OrderField entities.
type OrderFieldSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (ofs *OrderFieldSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := ofs.path(ctx)
	if err != nil {
		return err
	}
	ofs.sql = query
	return ofs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ofs *OrderFieldSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ofs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (ofs *OrderFieldSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ofs.fields) > 1 {
		return nil, errors.New("ent: OrderFieldSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ofs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ofs *OrderFieldSelect) StringsX(ctx context.Context) []string {
	v, err := ofs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (ofs *OrderFieldSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ofs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderfield.Label}
	default:
		err = fmt.Errorf("ent: OrderFieldSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ofs *OrderFieldSelect) StringX(ctx context.Context) string {
	v, err := ofs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (ofs *OrderFieldSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ofs.fields) > 1 {
		return nil, errors.New("ent: OrderFieldSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ofs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ofs *OrderFieldSelect) IntsX(ctx context.Context) []int {
	v, err := ofs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (ofs *OrderFieldSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ofs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderfield.Label}
	default:
		err = fmt.Errorf("ent: OrderFieldSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ofs *OrderFieldSelect) IntX(ctx context.Context) int {
	v, err := ofs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (ofs *OrderFieldSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ofs.fields) > 1 {
		return nil, errors.New("ent: OrderFieldSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ofs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ofs *OrderFieldSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ofs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (ofs *OrderFieldSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ofs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderfield.Label}
	default:
		err = fmt.Errorf("ent: OrderFieldSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ofs *OrderFieldSelect) Float64X(ctx context.Context) float64 {
	v, err := ofs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (ofs *OrderFieldSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ofs.fields) > 1 {
		return nil, errors.New("ent: OrderFieldSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ofs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ofs *OrderFieldSelect) BoolsX(ctx context.Context) []bool {
	v, err := ofs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (ofs *OrderFieldSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ofs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderfield.Label}
	default:
		err = fmt.Errorf("ent: OrderFieldSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ofs *OrderFieldSelect) BoolX(ctx context.Context) bool {
	v, err := ofs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ofs *OrderFieldSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ofs.fields {
		if !orderfield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := ofs.sqlQuery().Query()
	if err := ofs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ofs *OrderFieldSelect) sqlQuery() sql.Querier {
	selector := ofs.sql
	selector.Select(selector.Columns(ofs.fields...)...)
	return selector
}
