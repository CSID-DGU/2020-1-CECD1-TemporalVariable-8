// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"lightServer/ent/category"
	"lightServer/ent/file"
	"lightServer/ent/history"
	"lightServer/ent/menu"
	"lightServer/ent/order"
	"lightServer/ent/predicate"
	"lightServer/ent/restaurant"
	"lightServer/ent/user"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RestaurantUpdate is the builder for updating Restaurant entities.
type RestaurantUpdate struct {
	config
	hooks      []Hook
	mutation   *RestaurantMutation
	predicates []predicate.Restaurant
}

// Where adds a new predicate for the builder.
func (ru *RestaurantUpdate) Where(ps ...predicate.Restaurant) *RestaurantUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetName sets the name field.
func (ru *RestaurantUpdate) SetName(s string) *RestaurantUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetDescription sets the description field.
func (ru *RestaurantUpdate) SetDescription(s string) *RestaurantUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the description field if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableDescription(s *string) *RestaurantUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of description.
func (ru *RestaurantUpdate) ClearDescription() *RestaurantUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetURI sets the uri field.
func (ru *RestaurantUpdate) SetURI(s string) *RestaurantUpdate {
	ru.mutation.SetURI(s)
	return ru
}

// SetNillableURI sets the uri field if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableURI(s *string) *RestaurantUpdate {
	if s != nil {
		ru.SetURI(*s)
	}
	return ru
}

// ClearURI clears the value of uri.
func (ru *RestaurantUpdate) ClearURI() *RestaurantUpdate {
	ru.mutation.ClearURI()
	return ru
}

// SetOwnerID sets the owner edge to User by id.
func (ru *RestaurantUpdate) SetOwnerID(id int) *RestaurantUpdate {
	ru.mutation.SetOwnerID(id)
	return ru
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableOwnerID(id *int) *RestaurantUpdate {
	if id != nil {
		ru = ru.SetOwnerID(*id)
	}
	return ru
}

// SetOwner sets the owner edge to User.
func (ru *RestaurantUpdate) SetOwner(u *User) *RestaurantUpdate {
	return ru.SetOwnerID(u.ID)
}

// SetAvatarID sets the avatar edge to File by id.
func (ru *RestaurantUpdate) SetAvatarID(id int) *RestaurantUpdate {
	ru.mutation.SetAvatarID(id)
	return ru
}

// SetNillableAvatarID sets the avatar edge to File by id if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableAvatarID(id *int) *RestaurantUpdate {
	if id != nil {
		ru = ru.SetAvatarID(*id)
	}
	return ru
}

// SetAvatar sets the avatar edge to File.
func (ru *RestaurantUpdate) SetAvatar(f *File) *RestaurantUpdate {
	return ru.SetAvatarID(f.ID)
}

// SetRootID sets the root edge to Restaurant by id.
func (ru *RestaurantUpdate) SetRootID(id int) *RestaurantUpdate {
	ru.mutation.SetRootID(id)
	return ru
}

// SetNillableRootID sets the root edge to Restaurant by id if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableRootID(id *int) *RestaurantUpdate {
	if id != nil {
		ru = ru.SetRootID(*id)
	}
	return ru
}

// SetRoot sets the root edge to Restaurant.
func (ru *RestaurantUpdate) SetRoot(r *Restaurant) *RestaurantUpdate {
	return ru.SetRootID(r.ID)
}

// AddChildIDs adds the children edge to Restaurant by ids.
func (ru *RestaurantUpdate) AddChildIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.AddChildIDs(ids...)
	return ru
}

// AddChildren adds the children edges to Restaurant.
func (ru *RestaurantUpdate) AddChildren(r ...*Restaurant) *RestaurantUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddChildIDs(ids...)
}

// SetParentID sets the parent edge to Restaurant by id.
func (ru *RestaurantUpdate) SetParentID(id int) *RestaurantUpdate {
	ru.mutation.SetParentID(id)
	return ru
}

// SetNillableParentID sets the parent edge to Restaurant by id if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableParentID(id *int) *RestaurantUpdate {
	if id != nil {
		ru = ru.SetParentID(*id)
	}
	return ru
}

// SetParent sets the parent edge to Restaurant.
func (ru *RestaurantUpdate) SetParent(r *Restaurant) *RestaurantUpdate {
	return ru.SetParentID(r.ID)
}

// AddHistoryIDs adds the histories edge to History by ids.
func (ru *RestaurantUpdate) AddHistoryIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.AddHistoryIDs(ids...)
	return ru
}

// AddHistories adds the histories edges to History.
func (ru *RestaurantUpdate) AddHistories(h ...*History) *RestaurantUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ru.AddHistoryIDs(ids...)
}

// AddCategoryIDs adds the categories edge to Category by ids.
func (ru *RestaurantUpdate) AddCategoryIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.AddCategoryIDs(ids...)
	return ru
}

// AddCategories adds the categories edges to Category.
func (ru *RestaurantUpdate) AddCategories(c ...*Category) *RestaurantUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddCategoryIDs(ids...)
}

// AddOrderIDs adds the orders edge to Order by ids.
func (ru *RestaurantUpdate) AddOrderIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.AddOrderIDs(ids...)
	return ru
}

// AddOrders adds the orders edges to Order.
func (ru *RestaurantUpdate) AddOrders(o ...*Order) *RestaurantUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ru.AddOrderIDs(ids...)
}

// AddMenuIDs adds the menus edge to Menu by ids.
func (ru *RestaurantUpdate) AddMenuIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.AddMenuIDs(ids...)
	return ru
}

// AddMenus adds the menus edges to Menu.
func (ru *RestaurantUpdate) AddMenus(m ...*Menu) *RestaurantUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.AddMenuIDs(ids...)
}

// Mutation returns the RestaurantMutation object of the builder.
func (ru *RestaurantUpdate) Mutation() *RestaurantMutation {
	return ru.mutation
}

// ClearOwner clears the "owner" edge to type User.
func (ru *RestaurantUpdate) ClearOwner() *RestaurantUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// ClearAvatar clears the "avatar" edge to type File.
func (ru *RestaurantUpdate) ClearAvatar() *RestaurantUpdate {
	ru.mutation.ClearAvatar()
	return ru
}

// ClearRoot clears the "root" edge to type Restaurant.
func (ru *RestaurantUpdate) ClearRoot() *RestaurantUpdate {
	ru.mutation.ClearRoot()
	return ru
}

// ClearChildren clears all "children" edges to type Restaurant.
func (ru *RestaurantUpdate) ClearChildren() *RestaurantUpdate {
	ru.mutation.ClearChildren()
	return ru
}

// RemoveChildIDs removes the children edge to Restaurant by ids.
func (ru *RestaurantUpdate) RemoveChildIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.RemoveChildIDs(ids...)
	return ru
}

// RemoveChildren removes children edges to Restaurant.
func (ru *RestaurantUpdate) RemoveChildren(r ...*Restaurant) *RestaurantUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to type Restaurant.
func (ru *RestaurantUpdate) ClearParent() *RestaurantUpdate {
	ru.mutation.ClearParent()
	return ru
}

// ClearHistories clears all "histories" edges to type History.
func (ru *RestaurantUpdate) ClearHistories() *RestaurantUpdate {
	ru.mutation.ClearHistories()
	return ru
}

// RemoveHistoryIDs removes the histories edge to History by ids.
func (ru *RestaurantUpdate) RemoveHistoryIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.RemoveHistoryIDs(ids...)
	return ru
}

// RemoveHistories removes histories edges to History.
func (ru *RestaurantUpdate) RemoveHistories(h ...*History) *RestaurantUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ru.RemoveHistoryIDs(ids...)
}

// ClearCategories clears all "categories" edges to type Category.
func (ru *RestaurantUpdate) ClearCategories() *RestaurantUpdate {
	ru.mutation.ClearCategories()
	return ru
}

// RemoveCategoryIDs removes the categories edge to Category by ids.
func (ru *RestaurantUpdate) RemoveCategoryIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.RemoveCategoryIDs(ids...)
	return ru
}

// RemoveCategories removes categories edges to Category.
func (ru *RestaurantUpdate) RemoveCategories(c ...*Category) *RestaurantUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveCategoryIDs(ids...)
}

// ClearOrders clears all "orders" edges to type Order.
func (ru *RestaurantUpdate) ClearOrders() *RestaurantUpdate {
	ru.mutation.ClearOrders()
	return ru
}

// RemoveOrderIDs removes the orders edge to Order by ids.
func (ru *RestaurantUpdate) RemoveOrderIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.RemoveOrderIDs(ids...)
	return ru
}

// RemoveOrders removes orders edges to Order.
func (ru *RestaurantUpdate) RemoveOrders(o ...*Order) *RestaurantUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ru.RemoveOrderIDs(ids...)
}

// ClearMenus clears all "menus" edges to type Menu.
func (ru *RestaurantUpdate) ClearMenus() *RestaurantUpdate {
	ru.mutation.ClearMenus()
	return ru
}

// RemoveMenuIDs removes the menus edge to Menu by ids.
func (ru *RestaurantUpdate) RemoveMenuIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.RemoveMenuIDs(ids...)
	return ru
}

// RemoveMenus removes menus edges to Menu.
func (ru *RestaurantUpdate) RemoveMenus(m ...*Menu) *RestaurantUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.RemoveMenuIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RestaurantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaurantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RestaurantUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RestaurantUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RestaurantUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RestaurantUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := restaurant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ru *RestaurantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   restaurant.Table,
			Columns: restaurant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: restaurant.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldName,
		})
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldDescription,
		})
	}
	if ru.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaurant.FieldDescription,
		})
	}
	if value, ok := ru.mutation.URI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldURI,
		})
	}
	if ru.mutation.URICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaurant.FieldURI,
		})
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AvatarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.AvatarTable,
			Columns: []string{restaurant.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AvatarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.AvatarTable,
			Columns: []string{restaurant.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   restaurant.RootTable,
			Columns: []string{restaurant.RootColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   restaurant.RootTable,
			Columns: []string{restaurant.RootColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.ChildrenTable,
			Columns: []string{restaurant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.ChildrenTable,
			Columns: []string{restaurant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.ChildrenTable,
			Columns: []string{restaurant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.ParentTable,
			Columns: []string{restaurant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.ParentTable,
			Columns: []string{restaurant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.HistoriesTable,
			Columns: restaurant.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !ru.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.HistoriesTable,
			Columns: restaurant.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.HistoriesTable,
			Columns: restaurant.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.CategoriesTable,
			Columns: []string{restaurant.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !ru.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.CategoriesTable,
			Columns: []string{restaurant.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.CategoriesTable,
			Columns: []string{restaurant.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OrdersTable,
			Columns: []string{restaurant.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !ru.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OrdersTable,
			Columns: []string{restaurant.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OrdersTable,
			Columns: []string{restaurant.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.MenusTable,
			Columns: []string{restaurant.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMenusIDs(); len(nodes) > 0 && !ru.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.MenusTable,
			Columns: []string{restaurant.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.MenusTable,
			Columns: []string{restaurant.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaurant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RestaurantUpdateOne is the builder for updating a single Restaurant entity.
type RestaurantUpdateOne struct {
	config
	hooks    []Hook
	mutation *RestaurantMutation
}

// SetName sets the name field.
func (ruo *RestaurantUpdateOne) SetName(s string) *RestaurantUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetDescription sets the description field.
func (ruo *RestaurantUpdateOne) SetDescription(s string) *RestaurantUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableDescription(s *string) *RestaurantUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of description.
func (ruo *RestaurantUpdateOne) ClearDescription() *RestaurantUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetURI sets the uri field.
func (ruo *RestaurantUpdateOne) SetURI(s string) *RestaurantUpdateOne {
	ruo.mutation.SetURI(s)
	return ruo
}

// SetNillableURI sets the uri field if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableURI(s *string) *RestaurantUpdateOne {
	if s != nil {
		ruo.SetURI(*s)
	}
	return ruo
}

// ClearURI clears the value of uri.
func (ruo *RestaurantUpdateOne) ClearURI() *RestaurantUpdateOne {
	ruo.mutation.ClearURI()
	return ruo
}

// SetOwnerID sets the owner edge to User by id.
func (ruo *RestaurantUpdateOne) SetOwnerID(id int) *RestaurantUpdateOne {
	ruo.mutation.SetOwnerID(id)
	return ruo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableOwnerID(id *int) *RestaurantUpdateOne {
	if id != nil {
		ruo = ruo.SetOwnerID(*id)
	}
	return ruo
}

// SetOwner sets the owner edge to User.
func (ruo *RestaurantUpdateOne) SetOwner(u *User) *RestaurantUpdateOne {
	return ruo.SetOwnerID(u.ID)
}

// SetAvatarID sets the avatar edge to File by id.
func (ruo *RestaurantUpdateOne) SetAvatarID(id int) *RestaurantUpdateOne {
	ruo.mutation.SetAvatarID(id)
	return ruo
}

// SetNillableAvatarID sets the avatar edge to File by id if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableAvatarID(id *int) *RestaurantUpdateOne {
	if id != nil {
		ruo = ruo.SetAvatarID(*id)
	}
	return ruo
}

// SetAvatar sets the avatar edge to File.
func (ruo *RestaurantUpdateOne) SetAvatar(f *File) *RestaurantUpdateOne {
	return ruo.SetAvatarID(f.ID)
}

// SetRootID sets the root edge to Restaurant by id.
func (ruo *RestaurantUpdateOne) SetRootID(id int) *RestaurantUpdateOne {
	ruo.mutation.SetRootID(id)
	return ruo
}

// SetNillableRootID sets the root edge to Restaurant by id if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableRootID(id *int) *RestaurantUpdateOne {
	if id != nil {
		ruo = ruo.SetRootID(*id)
	}
	return ruo
}

// SetRoot sets the root edge to Restaurant.
func (ruo *RestaurantUpdateOne) SetRoot(r *Restaurant) *RestaurantUpdateOne {
	return ruo.SetRootID(r.ID)
}

// AddChildIDs adds the children edge to Restaurant by ids.
func (ruo *RestaurantUpdateOne) AddChildIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.AddChildIDs(ids...)
	return ruo
}

// AddChildren adds the children edges to Restaurant.
func (ruo *RestaurantUpdateOne) AddChildren(r ...*Restaurant) *RestaurantUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddChildIDs(ids...)
}

// SetParentID sets the parent edge to Restaurant by id.
func (ruo *RestaurantUpdateOne) SetParentID(id int) *RestaurantUpdateOne {
	ruo.mutation.SetParentID(id)
	return ruo
}

// SetNillableParentID sets the parent edge to Restaurant by id if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableParentID(id *int) *RestaurantUpdateOne {
	if id != nil {
		ruo = ruo.SetParentID(*id)
	}
	return ruo
}

// SetParent sets the parent edge to Restaurant.
func (ruo *RestaurantUpdateOne) SetParent(r *Restaurant) *RestaurantUpdateOne {
	return ruo.SetParentID(r.ID)
}

// AddHistoryIDs adds the histories edge to History by ids.
func (ruo *RestaurantUpdateOne) AddHistoryIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.AddHistoryIDs(ids...)
	return ruo
}

// AddHistories adds the histories edges to History.
func (ruo *RestaurantUpdateOne) AddHistories(h ...*History) *RestaurantUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ruo.AddHistoryIDs(ids...)
}

// AddCategoryIDs adds the categories edge to Category by ids.
func (ruo *RestaurantUpdateOne) AddCategoryIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.AddCategoryIDs(ids...)
	return ruo
}

// AddCategories adds the categories edges to Category.
func (ruo *RestaurantUpdateOne) AddCategories(c ...*Category) *RestaurantUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddCategoryIDs(ids...)
}

// AddOrderIDs adds the orders edge to Order by ids.
func (ruo *RestaurantUpdateOne) AddOrderIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.AddOrderIDs(ids...)
	return ruo
}

// AddOrders adds the orders edges to Order.
func (ruo *RestaurantUpdateOne) AddOrders(o ...*Order) *RestaurantUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ruo.AddOrderIDs(ids...)
}

// AddMenuIDs adds the menus edge to Menu by ids.
func (ruo *RestaurantUpdateOne) AddMenuIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.AddMenuIDs(ids...)
	return ruo
}

// AddMenus adds the menus edges to Menu.
func (ruo *RestaurantUpdateOne) AddMenus(m ...*Menu) *RestaurantUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.AddMenuIDs(ids...)
}

// Mutation returns the RestaurantMutation object of the builder.
func (ruo *RestaurantUpdateOne) Mutation() *RestaurantMutation {
	return ruo.mutation
}

// ClearOwner clears the "owner" edge to type User.
func (ruo *RestaurantUpdateOne) ClearOwner() *RestaurantUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// ClearAvatar clears the "avatar" edge to type File.
func (ruo *RestaurantUpdateOne) ClearAvatar() *RestaurantUpdateOne {
	ruo.mutation.ClearAvatar()
	return ruo
}

// ClearRoot clears the "root" edge to type Restaurant.
func (ruo *RestaurantUpdateOne) ClearRoot() *RestaurantUpdateOne {
	ruo.mutation.ClearRoot()
	return ruo
}

// ClearChildren clears all "children" edges to type Restaurant.
func (ruo *RestaurantUpdateOne) ClearChildren() *RestaurantUpdateOne {
	ruo.mutation.ClearChildren()
	return ruo
}

// RemoveChildIDs removes the children edge to Restaurant by ids.
func (ruo *RestaurantUpdateOne) RemoveChildIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.RemoveChildIDs(ids...)
	return ruo
}

// RemoveChildren removes children edges to Restaurant.
func (ruo *RestaurantUpdateOne) RemoveChildren(r ...*Restaurant) *RestaurantUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to type Restaurant.
func (ruo *RestaurantUpdateOne) ClearParent() *RestaurantUpdateOne {
	ruo.mutation.ClearParent()
	return ruo
}

// ClearHistories clears all "histories" edges to type History.
func (ruo *RestaurantUpdateOne) ClearHistories() *RestaurantUpdateOne {
	ruo.mutation.ClearHistories()
	return ruo
}

// RemoveHistoryIDs removes the histories edge to History by ids.
func (ruo *RestaurantUpdateOne) RemoveHistoryIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.RemoveHistoryIDs(ids...)
	return ruo
}

// RemoveHistories removes histories edges to History.
func (ruo *RestaurantUpdateOne) RemoveHistories(h ...*History) *RestaurantUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ruo.RemoveHistoryIDs(ids...)
}

// ClearCategories clears all "categories" edges to type Category.
func (ruo *RestaurantUpdateOne) ClearCategories() *RestaurantUpdateOne {
	ruo.mutation.ClearCategories()
	return ruo
}

// RemoveCategoryIDs removes the categories edge to Category by ids.
func (ruo *RestaurantUpdateOne) RemoveCategoryIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.RemoveCategoryIDs(ids...)
	return ruo
}

// RemoveCategories removes categories edges to Category.
func (ruo *RestaurantUpdateOne) RemoveCategories(c ...*Category) *RestaurantUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveCategoryIDs(ids...)
}

// ClearOrders clears all "orders" edges to type Order.
func (ruo *RestaurantUpdateOne) ClearOrders() *RestaurantUpdateOne {
	ruo.mutation.ClearOrders()
	return ruo
}

// RemoveOrderIDs removes the orders edge to Order by ids.
func (ruo *RestaurantUpdateOne) RemoveOrderIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.RemoveOrderIDs(ids...)
	return ruo
}

// RemoveOrders removes orders edges to Order.
func (ruo *RestaurantUpdateOne) RemoveOrders(o ...*Order) *RestaurantUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ruo.RemoveOrderIDs(ids...)
}

// ClearMenus clears all "menus" edges to type Menu.
func (ruo *RestaurantUpdateOne) ClearMenus() *RestaurantUpdateOne {
	ruo.mutation.ClearMenus()
	return ruo
}

// RemoveMenuIDs removes the menus edge to Menu by ids.
func (ruo *RestaurantUpdateOne) RemoveMenuIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.RemoveMenuIDs(ids...)
	return ruo
}

// RemoveMenus removes menus edges to Menu.
func (ruo *RestaurantUpdateOne) RemoveMenus(m ...*Menu) *RestaurantUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.RemoveMenuIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RestaurantUpdateOne) Save(ctx context.Context) (*Restaurant, error) {
	var (
		err  error
		node *Restaurant
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaurantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RestaurantUpdateOne) SaveX(ctx context.Context) *Restaurant {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RestaurantUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RestaurantUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RestaurantUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := restaurant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ruo *RestaurantUpdateOne) sqlSave(ctx context.Context) (_node *Restaurant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   restaurant.Table,
			Columns: restaurant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: restaurant.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Restaurant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldName,
		})
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldDescription,
		})
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaurant.FieldDescription,
		})
	}
	if value, ok := ruo.mutation.URI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldURI,
		})
	}
	if ruo.mutation.URICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaurant.FieldURI,
		})
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AvatarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.AvatarTable,
			Columns: []string{restaurant.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AvatarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.AvatarTable,
			Columns: []string{restaurant.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   restaurant.RootTable,
			Columns: []string{restaurant.RootColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   restaurant.RootTable,
			Columns: []string{restaurant.RootColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.ChildrenTable,
			Columns: []string{restaurant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.ChildrenTable,
			Columns: []string{restaurant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.ChildrenTable,
			Columns: []string{restaurant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.ParentTable,
			Columns: []string{restaurant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.ParentTable,
			Columns: []string{restaurant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.HistoriesTable,
			Columns: restaurant.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !ruo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.HistoriesTable,
			Columns: restaurant.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.HistoriesTable,
			Columns: restaurant.HistoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.CategoriesTable,
			Columns: []string{restaurant.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !ruo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.CategoriesTable,
			Columns: []string{restaurant.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.CategoriesTable,
			Columns: []string{restaurant.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OrdersTable,
			Columns: []string{restaurant.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !ruo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OrdersTable,
			Columns: []string{restaurant.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OrdersTable,
			Columns: []string{restaurant.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.MenusTable,
			Columns: []string{restaurant.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMenusIDs(); len(nodes) > 0 && !ruo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.MenusTable,
			Columns: []string{restaurant.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.MenusTable,
			Columns: []string{restaurant.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Restaurant{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaurant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
