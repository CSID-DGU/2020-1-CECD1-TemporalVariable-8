// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lightServer/ent/menu"
	"lightServer/ent/orderfield"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// OrderFieldCreate is the builder for creating a OrderField entity.
type OrderFieldCreate struct {
	config
	mutation *OrderFieldMutation
	hooks    []Hook
}

// SetCount sets the count field.
func (ofc *OrderFieldCreate) SetCount(u uint16) *OrderFieldCreate {
	ofc.mutation.SetCount(u)
	return ofc
}

// SetMenuID sets the menu edge to Menu by id.
func (ofc *OrderFieldCreate) SetMenuID(id int) *OrderFieldCreate {
	ofc.mutation.SetMenuID(id)
	return ofc
}

// SetMenu sets the menu edge to Menu.
func (ofc *OrderFieldCreate) SetMenu(m *Menu) *OrderFieldCreate {
	return ofc.SetMenuID(m.ID)
}

// Mutation returns the OrderFieldMutation object of the builder.
func (ofc *OrderFieldCreate) Mutation() *OrderFieldMutation {
	return ofc.mutation
}

// Save creates the OrderField in the database.
func (ofc *OrderFieldCreate) Save(ctx context.Context) (*OrderField, error) {
	var (
		err  error
		node *OrderField
	)
	if len(ofc.hooks) == 0 {
		if err = ofc.check(); err != nil {
			return nil, err
		}
		node, err = ofc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ofc.check(); err != nil {
				return nil, err
			}
			ofc.mutation = mutation
			node, err = ofc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ofc.hooks) - 1; i >= 0; i-- {
			mut = ofc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ofc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ofc *OrderFieldCreate) SaveX(ctx context.Context) *OrderField {
	v, err := ofc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ofc *OrderFieldCreate) check() error {
	if _, ok := ofc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New("ent: missing required field \"count\"")}
	}
	if v, ok := ofc.mutation.Count(); ok {
		if err := orderfield.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf("ent: validator failed for field \"count\": %w", err)}
		}
	}
	if _, ok := ofc.mutation.MenuID(); !ok {
		return &ValidationError{Name: "menu", err: errors.New("ent: missing required edge \"menu\"")}
	}
	return nil
}

func (ofc *OrderFieldCreate) sqlSave(ctx context.Context) (*OrderField, error) {
	_node, _spec := ofc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ofc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ofc *OrderFieldCreate) createSpec() (*OrderField, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderField{config: ofc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderfield.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderfield.FieldID,
			},
		}
	)
	if value, ok := ofc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  value,
			Column: orderfield.FieldCount,
		})
		_node.Count = value
	}
	if nodes := ofc.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderfield.MenuTable,
			Columns: []string{orderfield.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderFieldCreateBulk is the builder for creating a bulk of OrderField entities.
type OrderFieldCreateBulk struct {
	config
	builders []*OrderFieldCreate
}

// Save creates the OrderField entities in the database.
func (ofcb *OrderFieldCreateBulk) Save(ctx context.Context) ([]*OrderField, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ofcb.builders))
	nodes := make([]*OrderField, len(ofcb.builders))
	mutators := make([]Mutator, len(ofcb.builders))
	for i := range ofcb.builders {
		func(i int, root context.Context) {
			builder := ofcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderFieldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ofcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ofcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ofcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ofcb *OrderFieldCreateBulk) SaveX(ctx context.Context) []*OrderField {
	v, err := ofcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
