// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"lightServer/ent/orderfield"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// OrderField is the model entity for the OrderField schema.
type OrderField struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Count holds the value of the "count" field.
	Count uint16 `json:"count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderFieldQuery when eager-loading is set.
	Edges       OrderFieldEdges `json:"edges"`
	order_items *int
}

// OrderFieldEdges holds the relations/edges for other nodes in the graph.
type OrderFieldEdges struct {
	// Menu holds the value of the menu edge.
	Menu []*Menu
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MenuOrErr returns the Menu value or an error if the edge
// was not loaded in eager-loading.
func (e OrderFieldEdges) MenuOrErr() ([]*Menu, error) {
	if e.loadedTypes[0] {
		return e.Menu, nil
	}
	return nil, &NotLoadedError{edge: "menu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderField) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // count
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*OrderField) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // order_items
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderField fields.
func (of *OrderField) assignValues(values ...interface{}) error {
	if m, n := len(values), len(orderfield.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	of.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field count", values[0])
	} else if value.Valid {
		of.Count = uint16(value.Int64)
	}
	values = values[1:]
	if len(values) == len(orderfield.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field order_items", value)
		} else if value.Valid {
			of.order_items = new(int)
			*of.order_items = int(value.Int64)
		}
	}
	return nil
}

// QueryMenu queries the menu edge of the OrderField.
func (of *OrderField) QueryMenu() *MenuQuery {
	return (&OrderFieldClient{config: of.config}).QueryMenu(of)
}

// Update returns a builder for updating this OrderField.
// Note that, you need to call OrderField.Unwrap() before calling this method, if this OrderField
// was returned from a transaction, and the transaction was committed or rolled back.
func (of *OrderField) Update() *OrderFieldUpdateOne {
	return (&OrderFieldClient{config: of.config}).UpdateOne(of)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (of *OrderField) Unwrap() *OrderField {
	tx, ok := of.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderField is not a transactional entity")
	}
	of.config.driver = tx.drv
	return of
}

// String implements the fmt.Stringer.
func (of *OrderField) String() string {
	var builder strings.Builder
	builder.WriteString("OrderField(")
	builder.WriteString(fmt.Sprintf("id=%v", of.ID))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", of.Count))
	builder.WriteByte(')')
	return builder.String()
}

// OrderFields is a parsable slice of OrderField.
type OrderFields []*OrderField

func (of OrderFields) config(cfg config) {
	for _i := range of {
		of[_i].config = cfg
	}
}
