// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: Server.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _server_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RestaurantStatistics with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RestaurantStatistics) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RestaurantStatisticsValidationError is the validation error returned by
// RestaurantStatistics.Validate if the designated constraints aren't met.
type RestaurantStatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestaurantStatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestaurantStatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestaurantStatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestaurantStatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestaurantStatisticsValidationError) ErrorName() string {
	return "RestaurantStatisticsValidationError"
}

// Error satisfies the builtin error interface
func (e RestaurantStatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestaurantStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestaurantStatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestaurantStatisticsValidationError{}

// Validate checks the field values on Restaurant with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Restaurant) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for SubName

	// no validation rules for Url

	// no validation rules for Root

	// no validation rules for Parent

	return nil
}

// RestaurantValidationError is the validation error returned by
// Restaurant.Validate if the designated constraints aren't met.
type RestaurantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestaurantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestaurantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestaurantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestaurantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestaurantValidationError) ErrorName() string { return "RestaurantValidationError" }

// Error satisfies the builtin error interface
func (e RestaurantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestaurant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestaurantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestaurantValidationError{}

// Validate checks the field values on Menus with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Menus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Owner

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenusValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MenusValidationError is the validation error returned by Menus.Validate if
// the designated constraints aren't met.
type MenusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenusValidationError) ErrorName() string { return "MenusValidationError" }

// Error satisfies the builtin error interface
func (e MenusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenusValidationError{}

// Validate checks the field values on Menu with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Menu) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for PriceAmount

	// no validation rules for Currency

	// no validation rules for Owner

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MenuValidationError is the validation error returned by Menu.Validate if the
// designated constraints aren't met.
type MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuValidationError) ErrorName() string { return "MenuValidationError" }

// Error satisfies the builtin error interface
func (e MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuValidationError{}

// Validate checks the field values on Auth with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Auth) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Provider

	// no validation rules for ServiceId

	return nil
}

// AuthValidationError is the validation error returned by Auth.Validate if the
// designated constraints aren't met.
type AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthValidationError) ErrorName() string { return "AuthValidationError" }

// Error satisfies the builtin error interface
func (e AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Address

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *File) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Mime

	// no validation rules for CreateAt

	// no validation rules for Url

	return nil
}

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on OrderField with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OrderField) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Menu

	// no validation rules for Count

	return nil
}

// OrderFieldValidationError is the validation error returned by
// OrderField.Validate if the designated constraints aren't met.
type OrderFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderFieldValidationError) ErrorName() string { return "OrderFieldValidationError" }

// Error satisfies the builtin error interface
func (e OrderFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderFieldValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Order) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}
